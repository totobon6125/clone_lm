// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  userId    Int      @id @default(autoincrement()) // Primary Key
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserDetail  UserDetail[]
  HostEvents  HostEvent[]
  GuestEvents GuestEvent[]

  @@map("User")
}

// 사용자 정보 모델
model UserDetail {
  userDetailId Int     @id @default(autoincrement()) // Primary Key
  UserId       Int // Foreign Key
  nickname     String  @unique
  intro        String?
  profileImg   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Viewlogs Viewlog[]

  @@map("UserInfo")
}

// 이벤트 모델
model Event {
  eventId         Int      @id @default(autoincrement()) // Primary Key
  eventName       String
  maxSize         Int
  eventDate       DateTime
  signupStartDate DateTime
  signupEndDate   DateTime
  eventLocation   String
  content         String
  category        String
  isVerified      String   @default("no")
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  HostEvents  HostEvent[]
  GuestEvents GuestEvent[]
  Viewlogs    Viewlog[]
  Category    Category[]

  @@map("Event")
}

// 조회 기록 모델
model Viewlog {
  viewlogId Int @id @default(autoincrement()) // Primary Key
  EventId   Int
  UserId    Int

  Event      Event      @relation(fields: [EventId], references: [eventId])
  UserDetail UserDetail @relation(fields: [UserId], references: [userDetailId])

  @@map("Viewlog")
}

// 호스트 이벤트 매핑 모델
model HostEvent {
  hostEventId Int @id @default(autoincrement()) // Primary Key
  HostId      Int // Foreign Key
  EventId     Int // Foreign Key

  Event Event @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
  User  User  @relation(fields: [HostId], references: [userId], onDelete: Cascade)

  @@map("HostEvent")
}

model Category {
  categoryId Int    @id @default(autoincrement()) // Primary Key
  EventId    Int? // Foreign Key
  name       String

  Event Event? @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
}

// 게스트 이벤트 매핑 모델
model GuestEvent {
  guestEventId Int  @id @default(autoincrement()) // Primary Key
  GuestId      Int? // Foreign Key
  EventId      Int // Foreign Key

  Event Event @relation(fields: [EventId], references: [eventId], onDelete: Cascade)
  User  User? @relation(fields: [GuestId], references: [userId], onDelete: Cascade)

  @@map("GuestEvent")
}

model Region {
  RegionId Int    @id @default(autoincrement())
  doName   String
  guName   String
}
